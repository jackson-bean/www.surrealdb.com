<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.introduction">Introduction</Crumb::Item>
	<Crumb::Item @link="docs.introduction.index">Getting started </Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2>Getting started</h2>
	<p>In this guide, we will walk you through installing SurrealDB on your machine, defining your schema, and writing some queries with SurrealQL.</p>
	<blockquote yellow text="Before you start">Make sure you’ve
		<Link @link="docs.installation">installed SurrealDB</Link> — it should only take a second!
	</blockquote>

</Layout::Text>

<Layout::Gap small />

<Layout::Text text-l text-f>
	<h3>Start the database</h3>
	<p>First ensure that your database is set up correctly. To do so, run:</p>
	<Code @name="docs/start/index/version.shell" />
	<p>To start your database, run the start command specific to your machine.</p>
    <h4>macOS or Linux</h4>
	<Code @name="docs/start/index/linux.shell" />
    <h4>Windows</h4>
	<Code @name="docs/start/index/windows.shell" />

	<p>Here's what each segment of this command does:</p>
	<ul>
		<li><code>surreal start</code>: This initiates the process of starting the SurrealDB database server.
		</li>
		<li><code>--user root --pass root</code>: These flags set the username and password to access the database. Here both are set as <code>root</code>.
		Remember, it's not secure to hardcode credentials directly into a command like this for production environments.
		Instead, they should be securely stored in environment variables or some form of secret management system.</li>
		<li><code>memory</code>: This argument indicates that the database should be run in memory. Databases run in memory can have
		quicker data access times because they're not reading and writing from disk.</li>
	</ul>
</Layout::Text>

<Layout::Gap small />

<Layout::Text text-l text-f>
	<h3>Using SurrealQL</h3>
	<p>Using <Link @link="docs.surrealql">SurrealQL</Link>, you can query data from your SurrealDB database. While this is not a
	requirement for getting started, it is helpful to familiarise yourself with some commands.</p>
	<p>Once you have your database running, head over to <Link @link="https://surrealist.app/">Surrealist.app</Link>,
	which defaults to your local <code>http://localhost:8000/</code>. Using Surrealist, you can try out the following commands:</p>
	<blockquote Green text="Note"> Surrealist is a third-party web-based SurrealQL client that allows you to run queries against your SurrealDB, built and maintained
		<Link @link="https://github.com/StarlaneStudios">by StarlaneStudios</Link>!
	</blockquote>
	{{!-- <blockquote green text="Note">You can use <Link @link="https://www.postman.com">Postman</Link> to run queries on SurrealDB. The examples below use <code>cURL</code> on the command-line.</blockquote>
	<codes vertical>
		<Code @name="docs/start/index/step1.bash" text="Command line" />
		<Code @name="docs/start/index/step1.json" text="Output" />
	</codes>
	<p>Most queries in the database need to have a <code>NAMESPACE</code> and a <code>DATABASE</code> specified, before they can be run. In this quick start guide, as we are authenticating as the root user, we can specify any <code>NAMESPACE</code> and <code>DATABASE</code> that we desire.</p>
	<codes vertical>
		<Code @name="docs/start/index/step2.bash" text="Command line" />
		<Code @name="docs/start/index/step2.json" text="Output" />
	</codes> --}}
</Layout::Text>

<Layout::Gap small />

<Layout::Text text-l text-f>
	<h3><code>CREATE</code></h3>
	<p>The create command is used to add records to the database.</p>
	<codes vertical>
		<Code @name="docs/start/index/step3.surql" text="SQL" />
	</codes>
	<p>The <code>account</code> record will be created, and a random ID has been generated for this record. In SurrealDB every record can
	be created and accessed directly by its ID.</p>
	<p>In SurrealDB, every record can be created and accessed directly by its ID. In the following query, we will create a record, but will use a specific ID.</p>
	<codes vertical>
		<Code @name="docs/start/index/step4.surql" text="SQL" />
	</codes>
	<p>You can also link records to each other by creating a mutual record, for example, create a blog article record,
	which links to the author and account tables. In the following example we link to the author record directly by its ID,
	and we link to the account record with a subquery which searches using the <code>name</code> field.</p>
	<p>Let's now create a blog article record, which links to the <code>author</code> and <code>account</code> tables. In the following example we link to the author record directly by its ID, and we link to the account record with a subquery which gives us the ID for ACME Inc.</p>
	<codes vertical>
		<Code @name="docs/start/index/step5.surql" text="SQL" />
	</codes>
</Layout::Text>

<Layout::Gap small />

<Layout::Text text-l text-f>
	<h3>Querying data with <code>SELECT</code></h3>
	<p> The querying functionality in SurrealDB works similarly to a traditional SQL, but with many of the
	added benefits of NoSQL query languages. To retrieve data, we will use a <code>SELECT</code> query. You can query all the articles in your records and this will also return the record links.</p>
	<codes vertical>
		<Code @name="docs/start/index/step6.surql" text="SQL" />
	</codes>
	<p>Also in SurrealDB we can retrieve data from multiple different tables or records at once. In the example below we'll
	retrieve data from both the 'article' and the 'account' table in one query.</p>
	<codes vertical>
		<Code @name="docs/start/index/step7.surql" text="SQL" />
	</codes>
	<p>Also, Instead of pulling data from multiple tables and merging that data together, SurrealDB allows you to traverse
	related records efficiently without needing to use JOINs. In the following example, we will get all the articles where the author is younger than 30.
	In order to get the information for the author age for our filter condition we need to fetch the relevant records from the author table.</p>
	<codes vertical>
		<Code @name="docs/start/index/step8.surql" text="SQL" />
	</codes>
</Layout::Text>

<Layout::Gap small />

<Layout::Text text-l text-f>
	<h3><code>UPDATE</code></h3>
	<p> Similar to UPDATE in SQL you can also update specific IDs, for example say you wanted to update the first name of the
	author you can do so:</p>
	<codes vertical>
		<Code @name="docs/start/index/step9.surql" text="SQL" />
	</codes>
	<p>you can also update specific fields:</p>
	<codes vertical>
		<Code @name="docs/start/index/step10.surql" text="SQL" />
	</codes>
</Layout::Text>

<Layout::Gap small />

<Layout::Text text-l text-f>
	<h3><code>DELETE</code></h3>
	<p> You can also delete specific records <code>DELETE</code> <code>person:david</code>. You could also delete a record with specific conditions:</p>
	<codes vertical>
		<Code @name="docs/start/index/step11.surql" text="SQL" />
	</codes>
</Layout::Text>

<Layout::Gap small />

<Layout::Text text-l text-f>
	<h3><code>REMOVE</code></h3>
	<p> You can also remove a specific table using the <code>REMOVE TABLE</code>:</p>
	<codes vertical>
		<Code @name="docs/start/index/step12.surql" text="SQL" />
	</codes>
	<p>Congratulations, you’re now on your way to database and API simplicity! For the next steps, take a look at some
		of
		our in-depth guides to see some of the other advanced functionality that you can use in SurrealDB.</p>
</Layout::Text>

<Layout::Gap small />

<Layout::Text text-l text-f>
	<h3>Learn more</h3>
	<p>By completing this guide you have successfully set up a SurrealDB database and ran some SurrealQL queries. To learn more
	about <Link @link="docs.surrealql">SurrealQL, refer to the SurrealQL guides</Link>.</p>
</Layout::Text>

<Layout::Gap large />